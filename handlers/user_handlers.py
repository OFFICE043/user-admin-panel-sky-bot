# handlers/user_handlers.py

import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    CommandHandler,
    CallbackQueryHandler,
)
from telegram.constants import ParseMode

# –ñ–æ–±–∞–Ω—ã“£ –±–∞—Å“õ–∞ –º–æ–¥—É–ª—å–¥–µ—Ä—ñ–Ω–µ–Ω –∏–º–ø–æ—Ä—Ç—Ç–∞—É
import database
from main import SUPER_ADMINS, VIP_GREETING_STICKER_ID, ADMIN_IDS

# –õ–æ–≥–≥–µ—Ä–¥—ñ –æ—Ä–Ω–∞—Ç—É
logger = logging.getLogger(__name__)

# --- ConversationHandler –∫“Ø–π–ª–µ—Ä—ñ ---
(
    SEARCH_BY_NAME, SEARCH_BY_CODE, SEARCH_VIA_ADMIN,
    GET_REKLAMA, SUGGEST_REKLAMA,
    WAITING_SUPPORT_MESSAGE
) = range(6)


# --- –ë–∞—Ç—ã—Ä–º–∞–ª–∞—Ä (Keyboards) ---
# User Panel-–≥–µ “õ–∞—Ç—ã—Å—Ç—ã –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä –æ—Å—ã —Ñ–∞–π–ª–¥–∞ –±–æ–ª“ì–∞–Ω—ã —ã“£“ì–∞–π–ª—ã
def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    """–ù–µ–≥—ñ–∑–≥—ñ –º–µ–Ω—é –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä—ã."""
    keyboard = [
        [KeyboardButton("üé¨ Anime Izlash"), KeyboardButton("üì¢ Reklama")],
        [KeyboardButton("üëë VIP"), KeyboardButton("üìû Support")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_anime_search_keyboard() -> ReplyKeyboardMarkup:
    """–ê–Ω–∏–º–µ —ñ–∑–¥–µ—É –º–µ–Ω—é—ñ–Ω—ñ“£ –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä—ã."""
    keyboard = [
        [KeyboardButton("üìù Nomi orqali izlash"), KeyboardButton("üî¢ Kod orqali izlash")],
        [KeyboardButton("üìö Barcha animelar"), KeyboardButton("üèÜ Eng ko'p ko'rilgan 20 anime")],
        [KeyboardButton("üßë‚Äçüíª Admin orqali izlash")],
        [KeyboardButton("‚¨ÖÔ∏è Orqaga")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
def get_back_keyboard() -> ReplyKeyboardMarkup:
    """–¢–µ–∫ "–ê—Ä—Ç“õ–∞" –±–∞—Ç—ã—Ä–º–∞—Å—ã –±–∞—Ä –º–µ–Ω—é."""
    return ReplyKeyboardMarkup([[KeyboardButton("‚¨ÖÔ∏è Orqaga")]], resize_keyboard=True)


# --- –û–†–¢–ê“ö –§–£–ù–ö–¶–ò–Ø–õ–ê–† ---
async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–î–∏–∞–ª–æ–≥—Ç—ã —Ç–æ“õ—Ç–∞—Ç—ã–ø, –Ω–µ–≥—ñ–∑–≥—ñ –º–µ–Ω—é–≥–µ –æ—Ä–∞–ª–∞—Ç—ã–Ω –æ—Ä—Ç–∞“õ —Ñ—É–Ω–∫—Ü–∏—è."""
    await update.message.reply_text("Asosiy menyuga qaytdingiz.", reply_markup=get_main_menu_keyboard())
    return ConversationHandler.END


# --- /START –ö–û–ú–ê–ù–î–ê–°–´ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω ”©“£–¥–µ–π–¥—ñ, –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã —Ç—ñ—Ä–∫–µ–π–¥—ñ –∂”ô–Ω–µ —Ä”©–ª—ñ–Ω–µ “õ–∞—Ä–∞–π –º–µ–Ω—é –∂—ñ–±–µ—Ä–µ–¥—ñ."""
    user = update.effective_user
    try:
        database.add_or_update_user(user.id, user.username, user.first_name)
        role = database.get_user_role(user.id)
        
        if role == 'admin':
            await update.message.reply_text(f"Salom, Admin! Admin paneliga o'tish uchun /admin buyrug'ini bosing.")
            # –ë“±–ª –∂–µ—Ä–¥–µ –∞–¥–º–∏–Ω –º–µ–Ω—é—ñ–Ω –∫”©—Ä—Å–µ—Ç—É–≥–µ –¥–µ –±–æ–ª–∞–¥—ã, –±—ñ—Ä–∞“õ –±”©–ª–µ–∫ –∫–æ–º–∞–Ω–¥–∞–º–µ–Ω —à–∞“õ—ã—Ä“ì–∞–Ω –¥“±—Ä—ã—Å
        elif role == 'vip':
            if VIP_GREETING_STICKER_ID:
                await context.bot.send_sticker(chat_id=user.id, sticker=VIP_GREETING_STICKER_ID)
            await update.message.reply_text(f"Xush kelibsiz, hurmatli VIP a'zo {user.first_name}!", reply_markup=get_main_menu_keyboard())
        else: # role == 'user'
            await update.message.reply_text(f"Xush kelibsiz, {user.first_name}!", reply_markup=get_main_menu_keyboard())
            
    except Exception as e:
        logger.error(f"/start buyrug'ida {user.id} uchun xatolik: {e}")
        await update.message.reply_text("Botda texnik nosozlik yuz berdi.")


# --- ANIME IZLASH –ë”®–õ–Ü–ú–Ü ---
async def to_anime_search_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üé¨ Anime izlash bo'limi. Kerakli buyruqni tanlang:", reply_markup=get_anime_search_keyboard())

# –ê—Ç—ã –±–æ–π—ã–Ω—à–∞ —ñ–∑–¥–µ—É
async def search_by_name_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("Izlash uchun anime nomini yozing:", reply_markup=get_back_keyboard())
    return SEARCH_BY_NAME

async def search_by_name_receive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # database.py-–¥–∞“ì—ã find_anime_by_name —Ñ—É–Ω–∫—Ü–∏—è—Å—ã–Ω “õ–æ–ª–¥–∞–Ω–∞–º—ã–∑
    anime = database.find_anime_by_name(update.message.text)
    if anime:
        response = f"‚úÖ Topildi!\n\nüé¨ *Nomi:* {anime[2]}\nüî¢ *Kodi:* `{anime[1]}`\nüìÑ *Tavsif:* {anime[3] or 'Mavjud emas'}"
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN_V2)
    else:
        await update.message.reply_text("‚ùå Afsus, bunday nomdagi anime topilmadi.")
    await to_anime_search_menu(update, context) # –Ü–∑–¥–µ—É–¥–µ–Ω –∫–µ–π—ñ–Ω “õ–∞–π—Ç–∞ –º–µ–Ω—é–≥–µ –æ—Ä–∞–ª—É
    return ConversationHandler.END

# –ö–æ–¥—ã –±–æ–π—ã–Ω—à–∞ —ñ–∑–¥–µ—É
async def search_by_code_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("Izlash uchun anime kodini yozing:", reply_markup=get_back_keyboard())
    return SEARCH_BY_CODE

async def search_by_code_receive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    anime = database.find_anime_by_code(update.message.text)
    if anime:
        response = f"‚úÖ Topildi!\n\nüé¨ *Nomi:* {anime[2]}\nüî¢ *Kodi:* `{anime[1]}`\nüìÑ *Tavsif:* {anime[3] or 'Mavjud emas'}"
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN_V2)
    else:
        await update.message.reply_text("‚ùå Afsus, bunday kodli anime topilmadi.")
    await to_anime_search_menu(update, context)
    return ConversationHandler.END

# –ë–∞—Ä–ª—ã“õ –∞–Ω–∏–º–µ–ª–µ—Ä (–±–µ—Ç—Ç–µ—É–º–µ–Ω)
async def all_animes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–ë“±–ª —Ñ—É–Ω–∫—Ü–∏—è–Ω—ã“£ —Ç–æ–ª—ã“õ –∫–æ–¥—ã–Ω –∫–µ–ª–µ—Å—ñ–¥–µ “±—Å—ã–Ω–∞–º—ã–Ω, —Å–µ–±–µ–±—ñ –æ–ª –∫“Ø—Ä–¥–µ–ª—ñ—Ä–µ–∫)
    await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# –ö”©–ø –∫”©—Ä—ñ–ª–≥–µ–Ω–¥–µ—Ä
async def top_animes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–ë“±–ª —Ñ—É–Ω–∫—Ü–∏—è–Ω—ã“£ —Ç–æ–ª—ã“õ –∫–æ–¥—ã–Ω –∫–µ–ª–µ—Å—ñ–¥–µ “±—Å—ã–Ω–∞–º—ã–Ω)
    await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# –ê–¥–º–∏–Ω –∞—Ä“õ—ã–ª—ã —ñ–∑–¥–µ—É
async def search_via_admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    role = database.get_user_role(update.effective_user.id)
    if role not in ['vip', 'admin']:
        await update.message.reply_text("Bu bo'lim faqat VIP a'zo yoki Adminlar uchun.")
        return ConversationHandler.END
    
    await update.message.reply_text("Izlayotgan animeingiz haqida qisqacha ma'lumot yozing:", reply_markup=get_back_keyboard())
    return SEARCH_VIA_ADMIN

async def search_via_admin_receive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_info = f"Foydalanuvchi: {update.effective_user.mention_html()} (ID: {update.effective_user.id})"
    for admin_id in ADMIN_IDS:
        await context.bot.send_message(admin_id, f"üßë‚Äçüíª Yangi anime so'rovi!\n\n{user_info}\n\nSo'rov: {update.message.text}", parse_mode=ParseMode.HTML)
            
    await update.message.reply_text("‚úÖ So'rovingiz adminga yuborildi.")
    await to_anime_search_menu(update, context)
    return ConversationHandler.END


# --- REKLAMA –ë”®–õ–Ü–ú–Ü ---
async def to_reklama_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["Reklama olish"], ["Reklama taklif qilish"], ["‚¨ÖÔ∏è Orqaga"]]
    await update.message.reply_text("üì¢ Reklama bo'limi:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

# ... (–†–µ–∫–ª–∞–º–∞“ì–∞ “õ–∞—Ç—ã—Å—Ç—ã —Ç–æ–ª—ã“õ –¥–∏–∞–ª–æ–≥—Ç–∞—Ä –æ—Å—ã–Ω–¥–∞ –∂–∞–∑—ã–ª–∞–¥—ã)


# --- VIP –ñ”ò–ù–ï SUPPORT –ë”®–õ–Ü–ú–Ü ---
async def vip_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    vip_desc = database.get_setting('vip_description')
    full_vip_info = (vip_desc or "VIP a'zolik haqida ma'lumot kiritilmagan.") + \
                    "\n\nüëë VIP A'zolik afzalliklari:\n" \
                    "1. VIP a'zolar uchun yaratilgan maxsus komandalarga kirish.\n" \
                    "2. Ular uchun maxsus reaksiya beriladi.\n" \
                    "3. 1 oy hech qanday kanalga obuna bo'lmasdan anime tomosha qilish.\n" \
                    "4. Yangi anime yuklanganda birinchi sizga jo'natiladi."
    await update.message.reply_text(full_vip_info)

async def to_support_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = "Agar jiddiy savol yoki yordam kerak bo'lsa-gina yozing.\nQanday yordam kerakligini yozing:"
    await update.message.reply_text(text, reply_markup=get_back_keyboard())
    return WAITING_SUPPORT_MESSAGE

async def support_receive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_info = f"Foydalanuvchi: {update.effective_user.mention_html()} (ID: {update.effective_user.id})"
    for admin_id in ADMIN_IDS:
        await context.bot.send_message(admin_id, f"üÜò Yordam so'rovi (Support)!\n\n{user_info}\n\nMurojaat: {update.message.text}", parse_mode=ParseMode.HTML)
    
    response = "‚úÖ Xabaringiz yuborildi.\n‚ö†Ô∏è Eslatma: Agar xabaringiz jiddiy bo'lmasa, botdan chetlatilishingiz mumkin."
    await update.message.reply_text(response, reply_markup=get_main_menu_keyboard())
    return ConversationHandler.END


# --- –ë–ê–†–õ–´“ö –•–ï–ù–î–õ–ï–†–õ–ï–†–î–Ü –¢–Ü–†–ö–ï–ô–¢–Ü–ù –§–£–ù–ö–¶–ò–Ø ---
def register_user_handlers(application: Application):
    """–ë–∞—Ä–ª—ã“õ User Panel —Ö–µ–Ω–¥–ª–µ—Ä–ª–µ—Ä—ñ–Ω application-“ì–∞ —Ç—ñ—Ä–∫–µ–π–¥—ñ."""
    
    # Conversation Handlers
    anime_search_conv = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^üìù Nomi orqali izlash$"), search_by_name_start),
            MessageHandler(filters.Regex("^üî¢ Kod orqali izlash$"), search_by_code_start),
            MessageHandler(filters.Regex("^üßë‚Äçüíª Admin orqali izlash$"), search_via_admin_start),
        ],
        states={
            SEARCH_BY_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_by_name_receive)],
            SEARCH_BY_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_by_code_receive)],
            SEARCH_VIA_ADMIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_via_admin_receive)],
        },
        fallbacks=[MessageHandler(filters.Regex("^‚¨ÖÔ∏è Orqaga$"), back_to_main_menu)],
    )

    support_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìû Support$"), to_support_menu)],
        states={WAITING_SUPPORT_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, support_receive)]},
        fallbacks=[MessageHandler(filters.Regex("^‚¨ÖÔ∏è Orqaga$"), back_to_main_menu)],
    )
    
    # ... (–ë–∞—Å“õ–∞ Conversation Handler-–ª–µ—Ä –æ—Å—ã–Ω–¥–∞ “õ–æ—Å—ã–ª–∞–¥—ã)

    # –ù–µ–≥—ñ–∑–≥—ñ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä
    application.add_handler(CommandHandler("start", start))
    
    # –î–∏–∞–ª–æ–≥—Ç–∞—Ä
    application.add_handler(anime_search_conv)
    application.add_handler(support_conv)

    # “ö–∞—Ä–∞–ø–∞–π—ã–º –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä
    application.add_handler(MessageHandler(filters.Regex("^üé¨ Anime Izlash$"), to_anime_search_menu))
    application.add_handler(MessageHandler(filters.Regex("^üì¢ Reklama$"), to_reklama_menu))
    application.add_handler(MessageHandler(filters.Regex("^üëë VIP$"), vip_info))
    application.add_handler(MessageHandler(filters.Regex("^üìö Barcha animelar$"), all_animes))
    application.add_handler(MessageHandler(filters.Regex("^üèÜ Ko'p ko'rilgan 20 anime$"), top_animes))
    application.add_handler(MessageHandler(filters.Regex("^‚¨ÖÔ∏è Orqaga$"), back_to_main_menu))
    
    logger.info("User panel handler-lari muvaffaqiyatli o'rnatildi.")
